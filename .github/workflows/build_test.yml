name: "Build & Test"

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/test.yml"
      - "ruby/**"
      - "rust/**"
      - "tests/**"
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/test.yml"
      - "ruby/**"
      - "rust/**"
      - "tests/**"

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RB_SYS_CARGO_PROFILE: release
  RB_SYS_CROSS_COMPILE: true

jobs:
  test:
    name: "Build & Test"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    steps:
    - uses: actions/checkout@v4

    # Rust
    - name: "[Rust] [optify] Build"
      run: cargo build --release
      working-directory: ./rust/optify
    - name: "[Rust] [optify] Lint"
      run : cargo fmt -- --check
      working-directory: ./rust/optify
    - name: "[Rust] [optify] Clippy"
      run: cargo clippy --release -p optify --no-deps -- -D warnings --no-deps
      working-directory: ./rust/optify
    - name: "[Rust] [optify] Test"
      run: cargo test --release
      working-directory: ./rust/optify
    - name: "[Rust] Publish"
      if: github.ref == 'refs/heads/main'
      shell: bash
      # It probably just fails if the crate is already published.
      # We want to only be lenient for the `cargo publish`, but we would still want to clearly see that an issue happened during the run.
      continue-on-error: true
      run: |
        cargo login
        cargo publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      working-directory: ./rust/optify

    # Ruby
    # setup-ruby also runs `bundle install`.
    # It uses the Ruby version from .ruby-version.
    - uses: ruby/setup-ruby@v1
      name: "[Ruby] Setup"
      with:
        bundler-cache: true
        working-directory: ./ruby/optify
    - name: "[Ruby] Lint"
      run: |
        bundle exec srb tc
        bundle exec rubocop
      working-directory: ./ruby/optify
    - name: "[Ruby] Test"
      run: bundle exec rake test
      working-directory: ./ruby/optify
