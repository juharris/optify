name: "Build & Test"

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/build_test.yml"
      - "js/**"
      - "python/**"
      - "ruby/**"
      - "rust/**"
      - "tests/**"
  pull_request:
    branches: [ "main" ]
    types: [ opened, synchronize, reopened, ready_for_review ]
    paths:
      - ".github/workflows/build_test.yml"
      - "js/**"
      - "python/**"
      - "ruby/**"
      - "rust/**"
      - "tests/**"

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RB_SYS_CARGO_PROFILE: release
  RB_SYS_CROSS_COMPILE: true

jobs:
  setup:
    # Drafts: Only run on Ubuntu.
    # Non-drafts: Run on both Ubuntu and macOS.
    name: "Setup Build Matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup.outputs.matrix }}
    steps:
      - id: setup
        run: |
          if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            matrix='["ubuntu-latest"]'
          else
            matrix='["ubuntu-latest", "macos-latest"]'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  test:
    name: "Build & Test"
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v4

    # Rust
    - name: "[Rust] Setup cache"
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          js/optify-config
          python/optify
          ruby/optify
          rust/optify
        cache-on-failure: true
        shared-key: ${{ matrix.os }}-rust
    - name: "[Rust] Build"
      run: cargo build --release
      working-directory: ./rust/optify
    - name: "[Rust] Lint"
      run : cargo fmt -- --check
      working-directory: ./rust/optify
    - name: "[Rust] Clippy"
      run: cargo clippy --release --no-deps -- -D warnings --no-deps
      working-directory: ./rust/optify
    - name: "[Rust] Test"
      run: cargo test --release
      working-directory: ./rust/optify
    - name: "[Rust] Publish"
      if: github.ref == 'refs/heads/main' && matrix.os == 'ubuntu-latest'
      shell: bash
      # It probably just fails if the crate is already published.
      # We want to only be lenient for the `cargo publish`, but we would still want to clearly see that an issue happened during the run.
      continue-on-error: true
      run: |
        cargo publish --token ${CARGO_REGISTRY_TOKEN}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      working-directory: ./rust/optify
    - name: "[Rust] Publish (dry run)"
      if: github.ref != 'refs/heads/main' && matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        cargo publish --dry-run
      working-directory: ./rust/optify


    # JavaScript
    - name: "[JS][Rust] Lint"
      # Don't use Clippy because it gives too many errors.
      # It seems like the macros confuse it.
      run : cargo fmt -- --check
      working-directory: ./js/optify-config
    - name: "[JS] Install corepack"
      run: npm install -g corepack
    - name: Setup node
      uses: actions/setup-node@v4
      with:
        cache: yarn
        cache-dependency-path: ./js/optify-config/yarn.lock
        node-version: 20
    - name: "[JS] Install dependencies"
      run: yarn install
      working-directory: ./js/optify-config
    - name: "[JS] Build"
      run: |
        yarn build
        yarn build:ts
      working-directory: ./js/optify-config
    - name: "[JS] Test"
      run: yarn test
      working-directory: ./js/optify-config

    # Ruby
    # setup-ruby also runs `bundle install`.
    # It uses the Ruby version from .ruby-version.
    - uses: ruby/setup-ruby@v1
      name: "[Ruby] Setup"
      with:
        bundler-cache: true
        working-directory: ./ruby/optify
    - name: "[Ruby] Lint"
      shell: bash
      run: |
        set -ex
        bundle exec srb tc
        bundle exec rubocop

        # Ensure that the RBS file is up-to-date.
        mkdir -p tmp
        bundle exec rbs prototype rbi rbi/optify.rbi > tmp/optify.rbs~
        diff -u sig/optify.rbs tmp/optify.rbs~
      working-directory: ./ruby/optify
    - name: "[Ruby][Rust] Lint"
      run : cargo fmt -- --check
      working-directory: ./ruby/optify
    - name: "[Ruby][Rust] Clippy"
      run: cargo clippy --release --no-deps -- -D warnings --no-deps
      working-directory: ./ruby/optify
    - name: "[Ruby] Test"
      run: bundle exec rake test
      working-directory: ./ruby/optify

    # Python
    - uses: actions/setup-python@v5
      name: "[Python] Setup"
      with:
        cache: pip
        python-version: 3.x
    - name: "[Python] Build"
      shell: bash
      run: pip install -e .[dev]
      working-directory: ./python/optify
    - name: "[Python][Rust] Lint"
      run : cargo fmt -- --check
      working-directory: ./python/optify
    - name: "[Python][Rust] Clippy"
      run: cargo clippy --release --no-deps -- -D warnings --no-deps
      working-directory: ./python/optify
    - name: "[Python] Test"
      shell: bash
      run: pytest
      working-directory: ./python/optify


