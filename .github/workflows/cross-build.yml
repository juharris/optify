name: "Cross-Build"

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/cross-build.yml"
      - "ruby/**"
      - "rust/**"
  pull_request:
    branches: [ "main" ]
    paths:
      - ".github/workflows/cross-build.yml"
      - "ruby/**"
      - "rust/**"

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RB_SYS_CARGO_PROFILE: release

jobs:
  test:
    name: "Build"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby_platform:
        # Add more as needed.
        # More versions in https://raw.githubusercontent.com/oxidize-rb/rb-sys/main/data/derived/github-actions-matrix.json
        - aarch64-linux
        - arm64-darwin
        - x86_64-linux
        ruby_version:
        - "3.3"
    steps:
    - uses: actions/checkout@v4

    # This is file is mainly for local development and to help Sorbet.
    # It should not be needed for the build as we'll set a specific version of Ruby.
    - name: "rm .ruby-version"
      shell: bash
      run: |
        rm .ruby-version
      working-directory: ./ruby/optify

    # Should not be needed because we'll use Rust in a Docker container.
    # - uses: oxidize-rb/actions/setup-ruby-and-rust@main
    #   with:
    #     ruby-version: ${{ matrix.ruby_version }}
    #     bundler-cache: true
    #     cargo-cache: true
    #     cache-save-always: false
    #     cargo-vendor: true
    #     cache-version: v0-${{ matrix.ruby_platform }}
    #     working-directory: ./rust/optify
    - uses: ruby/setup-ruby@v1
      name: "[Ruby] Setup"
      with:
        bundler-cache: true
        ruby-version: ${{ matrix.ruby_version }}

    - name: "Versions"
      shell: bash
      run: |
        ruby --version
        rustup --version

    # A full build is probably not needed, but this helps ensure that /home/runner/.cargo/registry is created.
    # Otherwise, we get "docker: Error response from daemon: invalid mount config for type "bind": bind source path does not exist: /home/runner/.cargo/registry."
    - name: "[Rust] Build"
      run: cargo check --release
      working-directory: ./rust/optify

    # Documentation: https://github.com/oxidize-rb/actions/blob/main/cross-gem
    # Outputs: gem-path
    - uses: oxidize-rb/actions/cross-gem@main
      id: cross-gem
      name: "[Ruby] Cross-Build"
      with:
        cache-save-always: false
        platform: ${{ matrix.ruby_platform }}
        ruby-versions: "3.3"
        # Available versions: https://cache.ruby-lang.org/pub/misc/ci_versions/cruby.json
        # Found in https://github.com/oxidize-rb/actions/blob/main/fetch-ci-data/evaluate.rb
        # When we're ready:
        # ruby-versions: "3.3,3.4"
        working-directory: ./ruby/optify

    - name: "[Ruby] Publish"
      if: github.ref == 'refs/heads/main'
      shell: bash
      # It probably just fails if the gem is already published.
      # We don't want to only be lenient for the `gem push`, but we would still want to clearly see that an issue happened during the run.
      continue-on-error: true
      run: |
        set -ex
        gem_path="${{ steps.cross-gem.outputs.gem-path }}"
        ls -lh "${gem_path}"
        gem push "${gem_path}"
      env:
        GEM_HOST_API_KEY: '${{ secrets.RUBYGEMS_API_KEY }}'
